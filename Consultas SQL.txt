
-- PROCEDIMIENTOS ALMACENADOS
DELIMITER //
CREATE PROCEDURE ObtenerEmpleadosActivos()
BEGIN
    SELECT * FROM empleado WHERE estado = 'Active';
END //
DELIMITER ;

CALL ObtenerEmpleadosActivos();



DELIMITER //
CREATE PROCEDURE ActualizarEstadoEmpleado(
    IN p_idempleado INT,
    IN p_nuevo_estado VARCHAR(25)
)
BEGIN
    UPDATE empleado SET estado = p_nuevo_estado WHERE idempleado = p_idempleado;
END //
DELIMITER ;

CALL ActualizarEstadoEmpleado(3, 'Inactivo');
Activo




DELIMITER //
CREATE PROCEDURE CalcularTotalVentasEmpleado(
    IN p_idempleado INT,
    OUT p_total_ventas DECIMAL(10, 2)
)
BEGIN
    SELECT COALESCE(SUM(dv.precio_total_de_venta), 0) INTO p_total_ventas
    FROM venta v
    LEFT JOIN detalle_venta dv ON v.idventa = dv.idventa
    WHERE v.idempleado = p_idempleado;
END //
DELIMITER ;


CALL CalcularTotalVentasEmpleado(1, @total_ventas);
SELECT @total_ventas AS TotalVentasEmpleado;





DELIMITER //

CREATE FUNCTION ObtenerTotalVentasEmpleado(p_idempleado INT) RETURNS DECIMAL(10, 2)
BEGIN
    DECLARE total_ventas DECIMAL(10, 2);

    SELECT COALESCE(SUM(dv.precio_total_de_venta), 0)
    INTO total_ventas
    FROM venta v
    LEFT JOIN detalle_venta dv ON v.idventa = dv.idventa
    WHERE v.idempleado = p_idempleado;

    RETURN total_ventas;
END //

DELIMITER ;

SELECT ObtenerTotalVentasEmpleado(1) AS TotalVentasEmpleado1;




--  TRIGGER

DELIMITER //
CREATE TRIGGER actualizar_dias_entrega_productos
AFTER UPDATE ON proveedor
FOR EACH ROW
BEGIN
    -- Actualizar los dÃ­as de entrega del proveedor en los productos correspondientes
    UPDATE producto
    SET dias_de_entrega = NEW.dias_de_entrega
    WHERE idproveedor = NEW.idproveedor;
END;
//
DELIMITER ;


drop trigger actualizar_dias_entrega_productos;
SHOW TRIGGERS LIKE 'actualizar_dias_entrega_productos';

DELIMITER //
CREATE TRIGGER after_insert_detalle_venta
AFTER INSERT ON detalle_venta
FOR EACH ROW
BEGIN
    UPDATE producto
    SET stock = stock - NEW.cantidad_vendida
    WHERE idproducto = NEW.idproducto;
END;
//
DELIMITER ;


DELIMITER //
CREATE TRIGGER before_insert_detalle_venta
BEFORE INSERT ON detalle_venta
FOR EACH ROW
BEGIN
    DECLARE available_stock INT;

    SELECT stock INTO available_stock
    FROM producto
    WHERE idproducto = NEW.idproducto;

    IF NEW.cantidad_vendida > available_stock THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No hay suficiente stock para el producto seleccionado.';
    END IF;
END;
//
DELIMITER ;


--  Vistas 
CREATE VIEW vista_resumen_ventas AS
SELECT
    dv.iddetalle_venta,
    p.nombre AS producto,
    dv.cantidad_vendida,
    dv.precio_total_de_venta,
    v.fechaventa
FROM
    detalle_venta dv
JOIN producto p ON dv.idproducto = p.idproducto
JOIN venta v ON dv.idventa = v.idventa;

SELECT * FROM vista_resumen_ventas;



CREATE VIEW vista_inventario_con_proveedor AS
SELECT
    p.idproducto,
    p.nombre AS producto,
    p.precio_venta,
    p.stock,
    c.nombre AS categoria,
    pr.nombre AS proveedor,
    pr.dias_de_entrega
FROM
    producto p
JOIN categoria c ON p.idcategoria = c.idcategoria
JOIN proveedor pr ON p.idproveedor = pr.idproveedor;

SELECT * FROM vista_inventario_con_proveedor;